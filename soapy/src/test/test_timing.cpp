// [1890,-40000,-44400,205075,203593],
// [1989,-40000,-40439,205075,206197],
// [1982,-40000,-40720,205075,203744],
// [2076,-10000,-36960,205075,205729],
// [2114,-10000,-35440,235075,233487],
// [1496,-40000,-60160,235075,235221],
// [792,-40000,-88320,205075,204104],
// [868,-40000,-85280,205075,205604],
// [918,-40000,-83280,205075,205967],
// [963,-40000,-81480,205075,205962],
// [1008,-40000,-79680,205075,206166],
// [1025,-40000,-79000,205075,205141],
// [1082,-40000,-76720,205075,205738],
// [1128,-40000,-74880,205075,205636],
// [1147,-40000,-74120,205075,204901],
// [1194,-40000,-72240,205075,204998],
// [1162,-40000,-73520,205075,201942],
// [1289,-40000,-68440,205075,205753],
// [1288,-40000,-68480,205075,204298],
// [1352,-40000,-65920,205075,206605],
// [1358,-40000,-65680,205075,203591],
// [1416,-40000,-63360,205075,203980],
// [1494,-40000,-60240,205075,205525],
// [1481,-40000,-60759,205075,203243],
// [1572,-40000,-57120,205075,205186],
// [1627,-40000,-54920,205075,205705],
// [1666,-40000,-53360,205075,206306],
// [1687,-40000,-52520,205075,204833],
// [1746,-40000,-50160,205075,205602],
// [1766,-40000,-49360,205075,204618],
// [1825,-40000,-47000,205075,205371],
// [1880,-40000,-44800,205075,205934],
// [1920,-40000,-43200,205075,205810],
// [1963,-40000,-41480,205075,205907],
// [1990,-40000,-40400,205075,204505],
// [2043,-10000,-38280,205075,205790],
// [1965,-40000,-41400,235075,228850],
// [1434,-40000,-62640,205075,205671],
// [1456,-40000,-61760,205075,204336],
// [1521,-40000,-59160,205075,205558],
// [1563,-40000,-57480,205075,205942],
// [1575,-40000,-57000,205075,204501],
// [1650,-40000,-54000,205075,205758],
// [1698,-40000,-52080,205075,206048],
// [1722,-40000,-51120,205075,205150],
// [1754,-40000,-49840,205075,205257],
// [1805,-40000,-47800,205075,205295],
// [1860,-40000,-45599,205075,205815],
// [1901,-40000,-43960,205075,205872],
// [1944,-40000,-42240,205075,205862],
// [1990,-40000,-40400,205075,206154],
// [2009,-10000,-39640,205075,205519],
// [2044,-10000,-38240,235075,232859],
// [1420,-40000,-63200,235075,234026],
// [735,-40000,-90600,205075,204051],
// [721,-40000,-91160,205075,201693],
// [859,-40000,-85640,205075,205625],
// [900,-40000,-84000,205075,205533],
// [920,-40000,-83200,205075,204714],
// [979,-40000,-80840,205075,205350],
// [1021,-40000,-79160,205075,205495],
// [1064,-40000,-77440,205075,205496],
// [1071,-40000,-77160,205075,204012],
// [1143,-40000,-74280,205075,205244],
// [1189,-40000,-72440,205075,205408],
// [1231,-40000,-70760,205075,205476],
// [1247,-40000,-70120,205075,204446],
// [1302,-40000,-67920,205075,204859],
// [1352,-40000,-65920,205075,205159],
// [1409,-40000,-63640,205075,205995],
// [1437,-40000,-62520,205075,205386],
// [1486,-40000,-60560,205075,205926],
// [1531,-40000,-58760,205075,205859],
// [1576,-40000,-56960,205075,205971],
// [1617,-40000,-55320,205075,205948],
// [1572,-40000,-57120,205075,202464],
// [1701,-40000,-51960,205075,206147],
// [1738,-40000,-50480,205075,205880],
// [1761,-40000,-49560,205075,204903],
// [1810,-40000,-47600,205075,205238],
// [1852,-40000,-45920,205075,205305],


#include <rapidcheck.h>
#include "driver/AirPacket.hpp"
// #include "driver/VerifyHash.hpp"
// #include <boost/functional/hash.hpp>
#include "vector_helpers.hpp"
// #include "schedule.h"

#include <vector>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include "cpp_utils.hpp"
#include "random.h"
#include "schedule.h"


using namespace std;

#define __ENABLED


std::vector<uint32_t> packet_early() {
    std::vector<uint32_t> a = {1890,1989,1982,2076,2114,1496,792,868,918,963,1008,1025,1082,1128,1147,1194,1162,1289,1288,1352,1358,1416,1494,1481,1572,1627,1666,1687,1746,1766,1825,1880,1920,1963,1990,2043,1965,1434,1456,1521,1563,1575,1650,1698,1722,1754,1805,1860,1901,1944,1990,2009,2044,1420,735,721,859,900,920,979,1021,1064,1071,1143,1189,1231,1247,1302,1352,1409,1437,1486,1531,1576,1617,1572,1701,1738,1761,1810,1852};

    return a;
}


int expected_response(int x) {
    // double y = -0.02346667*x - 893.6667;


    // y = -42.61x-38000
    double m = -42.6136363636;
    double b = -38082.3863636;
    double y = m*x + b;

    return (int)(((double)0.5)+y);
}


int main() {

    auto epoc_reply = packet_early();

    AirPacketOutbound airTx;// = AirPacketOutbound();
    airTx.desired_cs20_early_frames = 3000;
    airTx.setTestDefaults();

    int target = 3000;

    for( x : epoc_reply) {

        auto ppair = airTx.suggestedSleep(x);
        auto sleep_time_adjust = ppair.second;


        // x is measured
        // delta is measured - target
        // subtracting in this method allows the delta to be changed without affecting the transform
        int delta = x-target;



        auto adjust2 = expected_response(delta);

        cout << "input x " << x << " delta " << delta << " output " << sleep_time_adjust << "Expected response " << adjust2  << endl;
            
        // cout << x << " " << sleep_time_adjust << endl;
        // cout << x << " y " << adjust2 << endl;



    }


    return 0;
}
